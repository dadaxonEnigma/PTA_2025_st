import streamlit as st
import onnxruntime as ort
import numpy as np
import torchvision.models as models
from PIL import Image
import torch
import torch.nn as nn
import cv2
from scipy.special import softmax
import os
import torchvision.transforms as transforms
import matplotlib.pyplot as plt
import io
from datetime import datetime

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(
    page_title="üåø Plant Disease Detector Pro",
    layout="centered",
    page_icon="üå±",
    initial_sidebar_state="expanded"
)

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –∏–º–ø–æ—Ä—Ç Grad-CAM
try:
    from pytorch_grad_cam import GradCAMPlusPlus
    from pytorch_grad_cam.utils.image import show_cam_on_image
    from pytorch_grad_cam.utils.model_targets import ClassifierOutputTarget
    GRADCAM_AVAILABLE = True
except ImportError:
    st.error("–ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ pytorch-grad-cam –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –µ—ë —Å –ø–æ–º–æ—â—å—é: `pip install grad-cam`")
    GRADCAM_AVAILABLE = False

# –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
st.title("üåø Plant Disease Detector Pro")

# –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å —Å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º–∏
with st.sidebar:
    st.header("üîß –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã")
    
    # –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç 1: –°–ø—Ä–∞–≤–æ—á–Ω–∏–∫ –±–æ–ª–µ–∑–Ω–µ–π
    with st.expander("üìö –°–ø—Ä–∞–≤–æ—á–Ω–∏–∫ –±–æ–ª–µ–∑–Ω–µ–π", expanded=True):
        st.markdown("""
        - **–ß—ë—Ä–Ω–∞—è –≥–Ω–∏–ª—å —è–±–ª–æ–Ω–∏**: –ì—Ä–∏–±–∫–æ–≤–æ–µ –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏–µ, –ø–æ—Ä–∞–∂–∞—é—â–µ–µ –ø–ª–æ–¥—ã –∏ –ª–∏—Å—Ç—å—è
        - **–°–µ–≤–µ—Ä–Ω–∞—è –ø—è—Ç–Ω–∏—Å—Ç–æ—Å—Ç—å –∫—É–∫—É—Ä—É–∑—ã**: –ì—Ä–∏–±–∫–æ–≤–æ–µ –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏–µ –ª–∏—Å—Ç—å–µ–≤
        - **–ß—ë—Ä–Ω–∞—è –≥–Ω–∏–ª—å –≤–∏–Ω–æ–≥—Ä–∞–¥–∞**: –û–ø–∞—Å–Ω–æ–µ –≥—Ä–∏–±–∫–æ–≤–æ–µ –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏–µ
        - **–†–∞–Ω–Ω—è—è –ø—è—Ç–Ω–∏—Å—Ç–æ—Å—Ç—å –∫–∞—Ä—Ç–æ—Ñ–µ–ª—è**: –ì—Ä–∏–±–∫–æ–≤–æ–µ –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏–µ –ª–∏—Å—Ç—å–µ–≤
        """)
    
    # –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç 2: –ö–∞–ª–µ–Ω–¥–∞—Ä—å –æ–±—Ä–∞–±–æ—Ç–∫–∏
    with st.expander("üìÖ –ö–∞–ª–µ–Ω–¥–∞—Ä—å –æ–±—Ä–∞–±–æ—Ç–∫–∏"):
        current_month = datetime.now().strftime("%B")
        st.markdown(f"### –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ {current_month}")
        st.markdown("""
        - –ü—Ä–æ—Ñ–∏–ª–∞–∫—Ç–∏—á–µ—Å–∫–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ—É–Ω–≥–∏—Ü–∏–¥–∞–º–∏
        - –†–µ–≥—É–ª—è—Ä–Ω—ã–π –æ—Å–º–æ—Ç—Ä —Ä–∞—Å—Ç–µ–Ω–∏–π
        - –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ—Ä–∞–∂—ë–Ω–Ω—ã—Ö —á–∞—Å—Ç–µ–π —Ä–∞—Å—Ç–µ–Ω–∏–π
        """)
    
    # –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç 3: –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –¥–æ–∑–∏—Ä–æ–≤–∫–∏
    with st.expander("üß™ –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –¥–æ–∑–∏—Ä–æ–≤–∫–∏"):
        area = st.number_input("–ü–ª–æ—â–∞–¥—å –æ–±—Ä–∞–±–æ—Ç–∫–∏ (–º¬≤)", min_value=1, value=100)
        concentration = st.selectbox("–ö–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—è –ø—Ä–µ–ø–∞—Ä–∞—Ç–∞", ["1%", "2%", "5%"])
        st.markdown(f"**–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π –æ–±—ä—ë–º:** {area * 0.1:.1f} –ª —Ä–∞—Å—Ç–≤–æ—Ä–∞")
    
    # –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç 4: –ü–æ–≥–æ–¥–Ω—ã–µ —É—Å–ª–æ–≤–∏—è
    with st.expander("‚õÖ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –ø–æ–≥–æ–¥–µ"):
        st.markdown("""
        - –ò–∑–±–µ–≥–∞–π—Ç–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–µ—Ä–µ–¥ –¥–æ–∂–¥—ë–º
        - –û–ø—Ç–∏–º–∞–ª—å–Ω–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: 15-25¬∞C
        - –õ—É—á—à–µ–µ –≤—Ä–µ–º—è: —É—Ç—Ä–æ –∏–ª–∏ –≤–µ—á–µ—Ä
        """)

# –û—Å–Ω–æ–≤–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
col1, col2 = st.columns([2, 1])
with col1:
    uploaded_file = st.file_uploader(
        "üì∑ –ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–æ—Ç–æ –ª–∏—Å—Ç–∞ —Ä–∞—Å—Ç–µ–Ω–∏—è", 
        type=["jpg", "jpeg", "png"],
        help="–°—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—Ä—É–π—Ç–µ –ø–æ—Ä–∞–∂—ë–Ω–Ω—ã–π –ª–∏—Å—Ç –Ω–∞ –æ–¥–Ω–æ—Ä–æ–¥–Ω–æ–º —Ñ–æ–Ω–µ –¥–ª—è –ª—É—á—à–µ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞"
    )

with col2:
    language = st.selectbox("üåê –í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫", ["–†—É—Å—Å–∫–∏–π", "–£–∑–±–µ–∫—Å–∫–∏–π", "–ê–Ω–≥–ª–∏–π—Å–∫–∏–π"])

# –ü—É—Ç–∏ –∫ –º–æ–¥–µ–ª—è–º
MODEL_PATH_ONNX = "model/plant_disease_mvp_model.onnx"
MODEL_PATH_PTH = "model/plant_disease_mvp_model.pth"

if not os.path.exists(MODEL_PATH_ONNX) or not os.path.exists(MODEL_PATH_PTH):
    st.error("‚ö†Ô∏è –ú–æ–¥–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—É—Ç—å –∫ —Ñ–∞–π–ª–∞–º –º–æ–¥–µ–ª–∏.")
    st.stop()

# –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
with st.spinner('üîÑ –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏...'):
    session = ort.InferenceSession(MODEL_PATH_ONNX)
    input_name = session.get_inputs()[0].name
    output_name = session.get_outputs()[0].name

    device = torch.device("cuda" if torch.cuda.is_available() else "cpu")
    model = models.resnet18(pretrained=False)
    model.fc = nn.Linear(model.fc.in_features, 8)
    model.load_state_dict(torch.load(MODEL_PATH_PTH, map_location=device))
    model = model.to(device).eval()

classes = [
    'Apple___Black_rot', 'Apple___healthy',
    'Corn_(maize)___Northern_Leaf_Blight', 'Corn_(maize)___healthy',
    'Grape___Black_rot', 'Grape___healthy',
    'Potato___Early_blight', 'Potato___healthy'
]

treatment = {
    'Apple___Black_rot': {
        'description': "–ì—Ä–∏–±–∫–æ–≤–æ–µ –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏–µ, –≤—ã–∑—ã–≤–∞–µ–º–æ–µ Botryosphaeria obtusa",
        'symptoms': "–ö–æ—Ä–∏—á–Ω–µ–≤—ã–µ –ø—è—Ç–Ω–∞ –Ω–∞ –ª–∏—Å—Ç—å—è—Ö, —á—ë—Ä–Ω—ã–µ –≥–Ω–∏–ª—ã–µ —É—á–∞—Å—Ç–∫–∏ –Ω–∞ –ø–ª–æ–¥–∞—Ö",
        'treatment': "–£–¥–∞–ª–∏—Ç–µ –∑–∞—Ä–∞–∂—ë–Ω–Ω—ã–µ –ø–ª–æ–¥—ã –∏ –ª–∏—Å—Ç—å—è. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ—É–Ω–≥–∏—Ü–∏–¥—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–∞–ø—Ç–∞–Ω–∞ –∏–ª–∏ —Ç–∏–æ—Ñ–∞–Ω–∞—Ç-–º–µ—Ç–∏–ª–∞.",
        'prevention': "–†–µ–≥—É–ª—è—Ä–Ω–∞—è –æ–±—Ä–µ–∑–∫–∞, —É–±–æ—Ä–∫–∞ –æ–ø–∞–≤—à–∏—Ö –ª–∏—Å—Ç—å–µ–≤, –ø—Ä–æ—Ñ–∏–ª–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–µ—Å–Ω–æ–π"
    },
    'Apple___healthy': {
        'description': "–ó–¥–æ—Ä–æ–≤–æ–µ —Ä–∞—Å—Ç–µ–Ω–∏–µ –±–µ–∑ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏–π",
        'recommendation': "–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ —Ç–µ–∫—É—â–∏–π —É—Ö–æ–¥. –†–µ–≥—É–ª—è—Ä–Ω–æ –æ—Å–º–∞—Ç—Ä–∏–≤–∞–π—Ç–µ —Ä–∞—Å—Ç–µ–Ω–∏–µ."
    },
    'Corn_(maize)___Northern_Leaf_Blight': {
        'description': "–ì—Ä–∏–±–∫–æ–≤–æ–µ –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏–µ, –≤—ã–∑—ã–≤–∞–µ–º–æ–µ Exserohilum turcicum",
        'symptoms': "–î–ª–∏–Ω–Ω—ã–µ —Å–µ—Ä–æ-–∑–µ–ª—ë–Ω—ã–µ –ø–æ—Ä–∞–∂–µ–Ω–∏—è –Ω–∞ –ª–∏—Å—Ç—å—è—Ö",
        'treatment': "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —É—Å—Ç–æ–π—á–∏–≤—ã–µ —Å–æ—Ä—Ç–∞. –ü—Ä–∏–º–µ–Ω–∏—Ç–µ —Ñ—É–Ω–≥–∏—Ü–∏–¥—ã, —Ç–∞–∫–∏–µ –∫–∞–∫ –∞–∑–æ–∫—Å–∏—Å—Ç—Ä–æ–±–∏–Ω.",
        'prevention': "–°–µ–≤–æ–æ–±–æ—Ä–æ—Ç, —É–Ω–∏—á—Ç–æ–∂–µ–Ω–∏–µ —Ä–∞—Å—Ç–∏—Ç–µ–ª—å–Ω—ã—Ö –æ—Å—Ç–∞—Ç–∫–æ–≤"
    },
    'Corn_(maize)___healthy': {
        'description': "–ó–¥–æ—Ä–æ–≤–æ–µ —Ä–∞—Å—Ç–µ–Ω–∏–µ –±–µ–∑ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏–π",
        'recommendation': "–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ —Ç–µ–∫—É—â–∏–π —É—Ö–æ–¥. –†–µ–≥—É–ª—è—Ä–Ω–æ –æ—Å–º–∞—Ç—Ä–∏–≤–∞–π—Ç–µ —Ä–∞—Å—Ç–µ–Ω–∏–µ."
    },
    'Grape___Black_rot': {
        'description': "–ì—Ä–∏–±–∫–æ–≤–æ–µ –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏–µ, –≤—ã–∑—ã–≤–∞–µ–º–æ–µ Guignardia bidwellii",
        'symptoms': "–ö–æ—Ä–∏—á–Ω–µ–≤—ã–µ –ø—è—Ç–Ω–∞ —Å —á—ë—Ä–Ω—ã–º–∏ —Ç–æ—á–∫–∞–º–∏ –Ω–∞ –ª–∏—Å—Ç—å—è—Ö, —Å–º–æ—Ä—â–µ–Ω–Ω—ã–µ —è–≥–æ–¥—ã",
        'treatment': "–£–¥–∞–ª–∏—Ç–µ –ø–æ—Ä–∞–∂—ë–Ω–Ω—ã–µ —è–≥–æ–¥—ã –∏ –ª–∏—Å—Ç—å—è. –ü—Ä–∏–º–µ–Ω–∏—Ç–µ —Ñ—É–Ω–≥–∏—Ü–∏–¥—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–∞–ø—Ç–∞–Ω–∞.",
        'prevention': "–•–æ—Ä–æ—à–∞—è –≤–µ–Ω—Ç–∏–ª—è—Ü–∏—è, –ø—Ä–æ—Ñ–∏–ª–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–æ —Ü–≤–µ—Ç–µ–Ω–∏—è"
    },
    'Grape___healthy': {
        'description': "–ó–¥–æ—Ä–æ–≤–æ–µ —Ä–∞—Å—Ç–µ–Ω–∏–µ –±–µ–∑ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏–π",
        'recommendation': "–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ —Ç–µ–∫—É—â–∏–π —É—Ö–æ–¥. –†–µ–≥—É–ª—è—Ä–Ω–æ –æ—Å–º–∞—Ç—Ä–∏–≤–∞–π—Ç–µ —Ä–∞—Å—Ç–µ–Ω–∏–µ."
    },
    'Potato___Early_blight': {
        'description': "–ì—Ä–∏–±–∫–æ–≤–æ–µ –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏–µ, –≤—ã–∑—ã–≤–∞–µ–º–æ–µ Alternaria solani",
        'symptoms': "–ö–æ–Ω—Ü–µ–Ω—Ç—Ä–∏—á–µ—Å–∫–∏–µ –∫–æ–ª—å—Ü–∞ –Ω–∞ –ª–∏—Å—Ç—å—è—Ö, –∂—ë–ª—Ç—ã–µ –æ—Ä–µ–æ–ª—ã",
        'treatment': "–ü—Ä–∏–º–µ–Ω–∏—Ç–µ —Ñ—É–Ω–≥–∏—Ü–∏–¥—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –º–µ–¥–∏. –£–¥–∞–ª–∏—Ç–µ –ø–æ—Ä–∞–∂—ë–Ω–Ω—ã–µ –ª–∏—Å—Ç—å—è.",
        'prevention': "–°–µ–≤–æ–æ–±–æ—Ä–æ—Ç, –∏–∑–±–µ–≥–∞–Ω–∏–µ –ø–µ—Ä–µ—É–≤–ª–∞–∂–Ω–µ–Ω–∏—è"
    },
    'Potato___healthy': {
        'description': "–ó–¥–æ—Ä–æ–≤–æ–µ —Ä–∞—Å—Ç–µ–Ω–∏–µ –±–µ–∑ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏–π",
        'recommendation': "–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ —Ç–µ–∫—É—â–∏–π —É—Ö–æ–¥. –†–µ–≥—É–ª—è—Ä–Ω–æ –æ—Å–º–∞—Ç—Ä–∏–≤–∞–π—Ç–µ —Ä–∞—Å—Ç–µ–Ω–∏–µ."
    }
}

preprocess = transforms.Compose([
    transforms.Resize((224, 224)),
    transforms.ToTensor(),
    transforms.Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225])
])

def get_heatmap(image, model, target_class):
    if not GRADCAM_AVAILABLE:
        return None
    try:
        with torch.no_grad():
            input_tensor = preprocess(image).unsqueeze(0).to(device)
        img_np = np.array(image).astype(np.float32) / 255.0
        target_layers = [model.layer4[-1]]
        cam = GradCAMPlusPlus(model=model, target_layers=target_layers)
        targets = [ClassifierOutputTarget(target_class)]
        cam_mask = cam(input_tensor=input_tensor, targets=targets)[0]
        cam_mask_resized = cv2.resize(cam_mask, (img_np.shape[1], img_np.shape[0]))
        heatmap = show_cam_on_image(img_np, cam_mask_resized, use_rgb=True)
        return Image.fromarray(heatmap)
    except Exception as e:
        st.error(f"GradCAM –æ—à–∏–±–∫–∞: {e}")
        return None
    
def get_filtered_map(image):
    """–ì—Ä–∞–¥–∏–µ–Ω—Ç + —É—Å–∏–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç—Ä–∞—Å—Ç–∞ + —è—Ä–∫–æ—Å—Ç—å"""
    img_gray = cv2.cvtColor(np.array(image), cv2.COLOR_RGB2GRAY)
    edges = cv2.Sobel(img_gray, ddepth=cv2.CV_64F, dx=1, dy=1, ksize=5)

    edges_abs = np.absolute(edges)
    edges_norm = (255 * (edges_abs / np.max(edges_abs))).astype(np.uint8)
    colored = cv2.applyColorMap(edges_norm, cv2.COLORMAP_MAGMA)  # –ú–æ–∂–Ω–æ 'JET', 'PLASMA', 'HOT'
    
    # –£—Å–∏–ª–∏–≤–∞–µ–º –∫–æ–Ω—Ç—Ä–∞—Å—Ç –∏ —è—Ä–∫–æ—Å—Ç—å
    enhanced = cv2.convertScaleAbs(colored, alpha=1.6, beta=30)
    enhanced = cv2.cvtColor(enhanced, cv2.COLOR_BGR2RGB)
    
    return Image.fromarray(enhanced)
def format_class_name(class_name):
    return class_name.replace("___", " ‚Äî ").replace("_", " ").title()

if uploaded_file:
    try:
        img = Image.open(uploaded_file).convert("RGB")
        
        # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è
        with st.expander("üîç –ü—Ä–æ—Å–º–æ—Ç—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è", expanded=True):
            st.image(img, caption="–ó–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", use_container_width=True)
            
            # –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º
            col_img1, col_img2 = st.columns(2)
            with col_img1:
                rotate = st.button("–ü–æ–≤–µ—Ä–Ω—É—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")
            with col_img2:
                download = st.button("–°–∫–∞—á–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")
            
            if rotate:
                img = img.rotate(90)
                st.experimental_rerun()
            
            if download:
                buf = io.BytesIO()
                img.save(buf, format="JPEG")
                byte_im = buf.getvalue()
                st.download_button(
                    label="–°–∫–∞—á–∞—Ç—å",
                    data=byte_im,
                    file_name="plant_image.jpg",
                    mime="image/jpeg"
                )

        # –ü—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        progress_bar = st.progress(0)
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        img_onnx = img.resize((224, 224))
        img_array = np.array(img_onnx).astype(np.float32) / 255.0
        img_array = img_array.transpose((2, 0, 1))
        mean = np.array([0.485, 0.456, 0.406], dtype=np.float32)
        std = np.array([0.229, 0.224, 0.225], dtype=np.float32)
        img_array = (img_array - mean[:, None, None]) / std[:, None, None]
        img_array = np.expand_dims(img_array, axis=0)
        progress_bar.progress(30)
        
        # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
        outputs = session.run([output_name], {input_name: img_array})[0]
        probs = softmax(outputs, axis=1)[0]
        top_idx = np.argsort(probs)[::-1][:3]
        pred_class = classes[top_idx[0]]
        progress_bar.progress(80)
        
        # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        st.subheader("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏")
        
        # –ö–∞—Ä—Ç–æ—á–∫–∞ —Å –æ—Å–Ω–æ–≤–Ω—ã–º –¥–∏–∞–≥–Ω–æ–∑–æ–º
        with st.container():
            st.markdown(f"### –û—Å–Ω–æ–≤–Ω–æ–π –¥–∏–∞–≥–Ω–æ–∑")
            st.markdown(f"**{format_class_name(pred_class)}** ‚Äî {probs[top_idx[0]]*100:.1f}%")
            st.markdown(f"**–û–ø–∏—Å–∞–Ω–∏–µ:** {treatment[pred_class]['description']}")
            
            if 'symptoms' in treatment[pred_class]:
                st.markdown(f"### üîç –°–∏–º–ø—Ç–æ–º—ã")
                st.markdown(treatment[pred_class]['symptoms'])
            
            st.markdown(f"### üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –ª–µ—á–µ–Ω–∏—é")
            st.markdown(treatment[pred_class]['treatment'] if 'treatment' in treatment[pred_class] else treatment[pred_class]['recommendation'])
            
            if 'prevention' in treatment[pred_class]:
                st.markdown(f"**–ü—Ä–æ—Ñ–∏–ª–∞–∫—Ç–∏–∫–∞:** {treatment[pred_class]['prevention']}")
        
        # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –¥–∏–∞–≥–Ω–æ–∑–∞
        with st.expander("üîé –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –¥–∏–∞–≥–Ω–æ–∑—ã", expanded=False):
            for i, idx in enumerate(top_idx[1:]):
                st.write(f"- {format_class_name(classes[idx])}: **{probs[idx]*100:.1f}%**")
        
        progress_bar.progress(100)
        progress_bar.empty()
        
        # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
        tab1, tab2, tab3, tab4 = st.tabs([
    "üìà –ì—Ä–∞—Ñ–∏–∫ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–µ–π", 
    "üå°Ô∏è –¢–µ–ø–ª–æ–≤–∞—è –∫–∞—Ä—Ç–∞",
    "üß™ –ß–∞—Å—Ç–æ—Ç–Ω–∞—è –∫–∞—Ä—Ç–∞",
    "üìã –ü–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ"
])
        
        with tab1:
            fig, ax = plt.subplots(figsize=(10, 6))
            colors = ['#1f77b4' if i == top_idx[0] else '#aec7e8' for i in range(len(probs))]
            ax.barh([format_class_name(classes[i]) for i in range(len(probs))], 
                    probs * 100, 
                    color=colors)
            ax.set_xlabel('–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å (%)')
            ax.set_title('–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–µ–π –ø–æ –∫–ª–∞—Å—Å–∞–º')
            plt.tight_layout()
            st.pyplot(fig)
            
            # –ö–Ω–æ–ø–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞
            buf = io.BytesIO()
            fig.savefig(buf, format="png", dpi=150)
            st.download_button(
                label="–°–∫–∞—á–∞—Ç—å –≥—Ä–∞—Ñ–∏–∫",
                data=buf.getvalue(),
                file_name="disease_probabilities.png",
                mime="image/png"
            )
        
        with tab2:
            if st.button("–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–ø–ª–æ–≤—É—é –∫–∞—Ä—Ç—É"):
                with st.spinner('–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ–ø–ª–æ–≤–æ–π –∫–∞—Ä—Ç—ã...'):
                    heatmap_img = get_heatmap(img, model, top_idx[0])
                    if heatmap_img:
                        st.image(
                            heatmap_img, 
                            caption="–¢–µ–ø–ª–æ–≤–∞—è –∫–∞—Ä—Ç–∞ (–∫—Ä–∞—Å–Ω—ã–º –≤—ã–¥–µ–ª–µ–Ω—ã –æ–±–ª–∞—Å—Ç–∏, –ø–æ–≤–ª–∏—è–≤—à–∏–µ –Ω–∞ –¥–∏–∞–≥–Ω–æ–∑)", 
                            use_container_width=True
                        )
                        
                        # –ö–Ω–æ–ø–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ç–µ–ø–ª–æ–≤–æ–π –∫–∞—Ä—Ç—ã
                        buf = io.BytesIO()
                        heatmap_img.save(buf, format="JPEG")
                        st.download_button(
                            label="–°–∫–∞—á–∞—Ç—å —Ç–µ–ø–ª–æ–≤—É—é –∫–∞—Ä—Ç—É",
                            data=buf.getvalue(),
                            file_name="heatmap.jpg",
                            mime="image/jpeg"
                        )
        with tab3:
            if st.button("–°–æ–∑–¥–∞—Ç—å —á–∞—Å—Ç–æ—Ç–Ω—É—é –∫–∞—Ä—Ç—É"):
                with st.spinner("–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è..."):
                    filtered_img = get_filtered_map(img)
                    st.image(filtered_img, caption="–ö–∞—Ä—Ç–∞ –≥—Ä–∞–¥–∏–µ–Ω—Ç–æ–≤ (—á–∞—Å—Ç–æ—Ç–Ω—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π)", use_container_width=True)
                    
                    buf = io.BytesIO()
                    filtered_img.save(buf, format="JPEG")
                    st.download_button(
                        label="–°–∫–∞—á–∞—Ç—å —á–∞—Å—Ç–æ—Ç–Ω—É—é –∫–∞—Ä—Ç—É",
                        data=buf.getvalue(),
                        file_name="frequency_map.jpg",
                        mime="image/jpeg"
                    )
                
        with tab4:
            st.json({
                "diagnosis": format_class_name(pred_class),
                "probability": f"{probs[top_idx[0]]*100:.2f}%",
                "timestamp": datetime.now().isoformat(),
                "all_probabilities": {
                    format_class_name(classes[i]): f"{probs[i]*100:.2f}%" 
                    for i in range(len(probs))
                }
            })
            
            # –ö–Ω–æ–ø–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –ø–æ–ª–Ω–æ–≥–æ –æ—Ç—á—ë—Ç–∞
            report = f"""
            –û—Ç—á—ë—Ç –æ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–µ —Ä–∞—Å—Ç–µ–Ω–∏—è
            ===========================
            
            –î–∞—Ç–∞: {datetime.now().strftime("%Y-%m-%d %H:%M")}
            –û—Å–Ω–æ–≤–Ω–æ–π –¥–∏–∞–≥–Ω–æ–∑: {format_class_name(pred_class)}
            –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å: {probs[top_idx[0]]*100:.1f}%
            
            –í—Å–µ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏:
            {chr(10).join([f"- {format_class_name(classes[i])}: {probs[i]*100:.2f}%" for i in range(len(probs))])}
            
            –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:
            {treatment[pred_class]['treatment'] if 'treatment' in treatment[pred_class] else treatment[pred_class]['recommendation']}
            """
            
            st.download_button(
                label="–°–∫–∞—á–∞—Ç—å –ø–æ–ª–Ω—ã–π –æ—Ç—á—ë—Ç",
                data=report,
                file_name="plant_diagnosis_report.txt",
                mime="text/plain"
            )

    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {str(e)}")
else:
    # –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ä–∞–∑–¥–µ–ª —Å –ø—Ä–∏–º–µ—Ä–∞–º–∏
    st.markdown("### –ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ–º?")
    st.markdown("""
    1. –°—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—Ä—É–π—Ç–µ –ø–æ—Ä–∞–∂—ë–Ω–Ω—ã–π –ª–∏—Å—Ç —Ä–∞—Å—Ç–µ–Ω–∏—è –Ω–∞ –æ–¥–Ω–æ—Ä–æ–¥–Ω–æ–º —Ñ–æ–Ω–µ
    2. –ó–∞–≥—Ä—É–∑–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ –ø–æ–ª–µ –≤—ã—à–µ
    3. –ü–æ–ª—É—á–∏—Ç–µ –¥–∏–∞–≥–Ω–æ–∑ –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –ª–µ—á–µ–Ω–∏—é
    
    **–°–æ–≤–µ—Ç:** –î–ª—è –ª—É—á—à–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ª–∏—Å—Ç —Ö–æ—Ä–æ—à–æ –æ—Å–≤–µ—â—ë–Ω –∏ –∑–∞–Ω–∏–º–∞–µ—Ç –±–æ–ª—å—à—É—é —á–∞—Å—Ç—å –∫–∞–¥—Ä–∞.
    """)
    
    # –ü—Ä–∏–º–µ—Ä—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    st.subheader("üìå –ü—Ä–∏–º–µ—Ä—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
    col_ex1, col_ex2, col_ex3 = st.columns(3)
    with col_ex1:
        st.image("https://github.com/spMohanty/PlantVillage-Dataset/raw/master/raw/color/Apple___Black_rot/0a4c0e4b-2ce3-4c1e-9bd6-4f4d0a1e57c3___JR_FrgE.S 8580.JPG", 
                caption="–ß—ë—Ä–Ω–∞—è –≥–Ω–∏–ª—å —è–±–ª–æ–Ω–∏", use_container_width=True)
    with col_ex2:
        st.image("https://github.com/spMohanty/PlantVillage-Dataset/raw/master/raw/color/Corn_(maize)___Northern_Leaf_Blight/0bfa3614-faee-4fbf-92aa-1c2a9f1d0476___RS_NLB 4023.JPG", 
                caption="–°–µ–≤–µ—Ä–Ω–∞—è –ø—è—Ç–Ω–∏—Å—Ç–æ—Å—Ç—å –∫—É–∫—É—Ä—É–∑—ã", use_container_width=True)
    with col_ex3:
        st.image("https://github.com/spMohanty/PlantVillage-Dataset/raw/master/raw/color/Potato___Early_blight/0a2ca798-8777-4d98-ab05-3a7d1b6f14a8___RS_Erly.B 8432.JPG", 
                caption="–†–∞–Ω–Ω—è—è –ø—è—Ç–Ω–∏—Å—Ç–æ—Å—Ç—å –∫–∞—Ä—Ç–æ—Ñ–µ–ª—è", use_container_width=True)