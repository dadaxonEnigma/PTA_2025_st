import streamlit as st
import onnxruntime as ort
import numpy as np
import torchvision.models as models
from PIL import Image
import torch
import torch.nn as nn
import cv2
from scipy.special import softmax
import os
import torchvision.transforms as transforms
import matplotlib.pyplot as plt

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –∏–º–ø–æ—Ä—Ç Grad-CAM
try:
    from pytorch_grad_cam import GradCAM
    from pytorch_grad_cam.utils.image import show_cam_on_image
    from pytorch_grad_cam.utils.model_targets import ClassifierOutputTarget
    GRADCAM_AVAILABLE = True
except ImportError:
    st.error("–ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ pytorch-grad-cam –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –µ—ë —Å –ø–æ–º–æ—â—å—é: `pip install grad-cam`")
    GRADCAM_AVAILABLE = False

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(page_title="üß† Plant Disease Detector", layout="centered")
st.title("üåø –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –±–æ–ª–µ–∑–Ω–∏ —Ä–∞—Å—Ç–µ–Ω–∏—è –ø–æ —Ñ–æ—Ç–æ")
st.write("–ó–∞–≥—Ä—É–∑–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ª–∏—Å—Ç–∞, –∏ –º–æ–¥–µ–ª—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç –±–æ–ª–µ–∑–Ω—å üå±")

# –ü—É—Ç–∏ –∫ –º–æ–¥–µ–ª—è–º
MODEL_PATH_ONNX = "model/plant_disease_mvp_model.onnx"
MODEL_PATH_PTH = "model/plant_disease_mvp_model.pth"

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –º–æ–¥–µ–ª–µ–π
if not os.path.exists(MODEL_PATH_ONNX) or not os.path.exists(MODEL_PATH_PTH):
    st.error(f"–ú–æ–¥–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {MODEL_PATH_ONNX} –∏–ª–∏ {MODEL_PATH_PTH}")
    st.stop()

# –ó–∞–≥—Ä—É–∑–∫–∞ ONNX –º–æ–¥–µ–ª–∏
session = ort.InferenceSession(MODEL_PATH_ONNX)
input_name = session.get_inputs()[0].name
output_name = session.get_outputs()[0].name

# –ó–∞–≥—Ä—É–∑–∫–∞ PyTorch –º–æ–¥–µ–ª–∏ –¥–ª—è Grad-CAM
device = torch.device("cuda" if torch.cuda.is_available() else "cpu")
model = models.resnet18(pretrained=False)
model.fc = nn.Linear(model.fc.in_features, 8)  # 8 –∫–ª–∞—Å—Å–æ–≤
model.load_state_dict(torch.load(MODEL_PATH_PTH, map_location=device))
model = model.to(device).eval()

# –°–ø–∏—Å–æ–∫ –∫–ª–∞—Å—Å–æ–≤
classes =  ['Apple___Black_rot', 
            'Apple___healthy', 
            'Corn_(maize)___Northern_Leaf_Blight', 
            'Corn_(maize)___healthy', 
            'Grape___Black_rot', 
            'Grape___healthy', 
            'Potato___Early_blight', 
            'Potato___healthy']

# –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –ª–µ—á–µ–Ω–∏—é
treatment = {
    'Apple___Black_rot': "–£–¥–∞–ª–∏—Ç–µ –∑–∞—Ä–∞–∂—ë–Ω–Ω—ã–µ –ø–ª–æ–¥—ã –∏ –ª–∏—Å—Ç—å—è, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ—É–Ω–≥–∏—Ü–∏–¥—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–∞–ø—Ç–∞–Ω–∞ –∏–ª–∏ —Ç–∏–æ—Ñ–∞–Ω–∞—Ç-–º–µ—Ç–∏–ª–∞.",
    'Apple___healthy': "–†–∞—Å—Ç–µ–Ω–∏–µ –∑–¥–æ—Ä–æ–≤–æ üçé",
    
    'Corn_(maize)___Northern_Leaf_Blight': "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —É—Å—Ç–æ–π—á–∏–≤—ã–µ —Å–æ—Ä—Ç–∞, –ø—Ä–∏–º–µ–Ω–∏—Ç–µ —Ñ—É–Ω–≥–∏—Ü–∏–¥—ã, —Ç–∞–∫–∏–µ –∫–∞–∫ –∞–∑–æ–∫—Å–∏—Å—Ç—Ä–æ–±–∏–Ω.",
    'Corn_(maize)___healthy': "–†–∞—Å—Ç–µ–Ω–∏–µ –∑–¥–æ—Ä–æ–≤–æ üåΩ",


    'Grape___Black_rot': "–£–¥–∞–ª–∏—Ç–µ –ø–æ—Ä–∞–∂—ë–Ω–Ω—ã–µ —è–≥–æ–¥—ã –∏ –ª–∏—Å—Ç—å—è, –ø—Ä–∏–º–µ–Ω–∏—Ç–µ —Ñ—É–Ω–≥–∏—Ü–∏–¥—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–∞–ø—Ç–∞–Ω–∞.",
    'Grape___healthy': "–†–∞—Å—Ç–µ–Ω–∏–µ –∑–¥–æ—Ä–æ–≤–æ üçá",

    'Potato___Early_blight': "–ü—Ä–∏–º–µ–Ω–∏—Ç–µ —Ñ—É–Ω–≥–∏—Ü–∏–¥—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –º–µ–¥–∏, —É–¥–∞–ª–∏—Ç–µ –ø–æ—Ä–∞–∂—ë–Ω–Ω—ã–µ –ª–∏—Å—Ç—å—è.",
    'Potato___healthy': "–†–∞—Å—Ç–µ–Ω–∏–µ –∑–¥–æ—Ä–æ–≤–æ ü•î",
    
}


# –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è
preprocess = transforms.Compose([
    transforms.Resize((224, 224)),
    transforms.ToTensor(),
    transforms.Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225])
])

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ–ø–ª–æ–≤–æ–π –∫–∞—Ä—Ç—ã
def get_heatmap(image, model, target_class):
    if not GRADCAM_AVAILABLE:
        return None
    try:
        model.eval()
        img = np.array(image).astype(np.float32) / 255.0
        input_tensor = preprocess(image).unsqueeze(0).to(device)
        target_layers = [model.layer4[-1]]
        cam = GradCAM(model=model, target_layers=target_layers)
        targets = [ClassifierOutputTarget(target_class)]
        cam_mask = cam(input_tensor=input_tensor, targets=targets)[0]
        cam_mask_resized = cv2.resize(cam_mask, (img.shape[1], img.shape[0]))
        heatmap = show_cam_on_image(img, cam_mask_resized, use_rgb=True)
        return Image.fromarray(heatmap)
    except Exception as e:
        st.error(f"GradCAM –æ—à–∏–±–∫–∞: {e}")
        return None

# –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
uploaded_file = st.file_uploader("üì∑ –ó–∞–≥—Ä—É–∑–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", type=["jpg", "jpeg", "png"])

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
if uploaded_file:
    try:
        img = Image.open(uploaded_file).convert("RGB")
        st.image(img, caption="–ó–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", use_container_width=True)

        # –ü—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è ONNX
        img_onnx = img.resize((224, 224))
        img_array = np.array(img_onnx).astype(np.float32) / 255.0
        img_array = img_array.transpose((2, 0, 1))  # HWC -> CHW
        mean = np.array([0.485, 0.456, 0.406], dtype=np.float32)
        std = np.array([0.229, 0.224, 0.225], dtype=np.float32)
        img_array = (img_array - mean[:, None, None]) / std[:, None, None]
        img_array = np.expand_dims(img_array, axis=0)

        # –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ —Å ONNX
        outputs = session.run([output_name], {input_name: img_array})[0]
        probs = softmax(outputs, axis=1)[0]
        top_idx = np.argsort(probs)[::-1][:3]

        # –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        st.subheader("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:")
        for i, idx in enumerate(top_idx):
            label = classes[idx].replace("___", " ‚Äî ").replace("_", " ").title()
            st.write(f"- {i+1}. {label}: **{probs[idx]*100:.1f}%**")

        pred_class = classes[top_idx[0]]
        st.success(f"‚úÖ –í–µ—Ä–æ—è—Ç–Ω–µ–µ –≤—Å–µ–≥–æ: *{pred_class.replace('___', ' ‚Äî ').replace('_', ' ').title()}*")
        st.info(f"üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: {treatment.get(pred_class, '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç')}")

        # –ö–Ω–æ–ø–∫–∞ –¥–ª—è —Ç–µ–ø–ª–æ–≤–æ–π –∫–∞—Ä—Ç—ã
        if st.button("üìà –ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–ø–ª–æ–≤—É—é –∫–∞—Ä—Ç—É (–ø–æ—á–µ–º—É —Ç–∞–∫ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ)"):
            heatmap_img = get_heatmap(img, model, top_idx[0])
            if heatmap_img:
                st.image(heatmap_img, caption="–¢–µ–ø–ª–æ–≤–∞—è –∫–∞—Ä—Ç–∞ (–æ–±–ª–∞—Å—Ç–∏, –ø–æ–≤–ª–∏—è–≤—à–∏–µ –Ω–∞ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ)", use_container_width=True)
                st.write("–¢–µ–ø–ª–æ–≤–∞—è –∫–∞—Ä—Ç–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç, –∫–∞–∫–∏–µ –æ–±–ª–∞—Å—Ç–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ–≤–ª–∏—è–ª–∏ –Ω–∞ —Ä–µ—à–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏.")

        # –ì—Ä–∞—Ñ–∏–∫ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–µ–π
        st.subheader("üìà –ì—Ä–∞—Ñ–∏–∫ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–µ–π")
        fig, ax = plt.subplots()
        ax.barh([classes[i].replace("___", " ‚Äî ").title() for i in range(len(probs))], probs * 100, color='skyblue')
        ax.set_xlabel('–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å (%)')
        ax.set_title('–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ –∫–ª–∞—Å—Å–æ–≤')
        plt.tight_layout()
        st.pyplot(fig)

        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–µ–π
        st.write("–í—Å–µ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏:", {classes[i].replace("___", " ‚Äî ").replace("_", " ").title(): f"{probs[i]*100:.2f}%" for i in range(len(probs))})

    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")